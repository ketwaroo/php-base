<?php

namespace Ketwaroo\Text;

/**
 * Unaccent
 */
class Unaccent {

    use \Ketwaroo\Pattern\TraitSingleton;

    protected $charMapSearch;
    protected $charMapReplace;

    public function __construct() {

        $reg = [
            // a-z
            '~^&([a-z])(?:acute|apos|breve|caron|cedil|cedli|circ|cy|dblac|dot|green|grave|macr|midot|modot|nodot|opf|ogon|ring|fr|scr|slash|strok|tilde|uml);$~i' => '\1',
            '~^&([a-z]+?)(?:lig|cy);$~i' => '\1',
            '~^&(eth|eng);$~i' => '\1',
            '~^&([^;]+);$~i' => '\1',
        ];

        $chars = array_diff(
                preg_replace(
                        array_keys($reg),
                        array_values($reg),
                        get_html_translation_table(HTML_ENTITIES, ENT_HTML5 | ENT_NOQUOTES)
                ),
// remove safe chars
                [
                    'Tab',
                    'NewLine',
                    'dollar',
                    'lpar',
                    'rpar',
                    'excl',
                    'period',
                    'comma',
                    'ast',
                    'ast',
                    'hyphen',
                    'vert',
                    'commat',
                    'num',
                    'Hat',
                    'lowbar',
                    'plus',
                    'lbrace',
                    'rbrace',
                    'rcub',
                    'quest',
                    'gt',
                    'lt',
                    'sol',
                    'equals',
                    'lbrack',
                    'rsqb',
                    'semi',
                    'sol',
                    'bsol',
                    'amp',
                    'percnt',
                    'grave',
                    'colon',
                    'iexcl',
                    'iquest',
                ]
        );
//        prnt(var_export(array_flip(array_filter($chars, function($x) {
//                                    return strlen($x) > 1;
//                                }))));
        $this->charMapSearch = array_keys($chars);
        $this->charMapReplace = array_values($chars);

        $chars = array_flip($this->charMapReplace);
        foreach (
        [
            'ac' => '~',
            'af' => '',
            'And' => ' and ',
            'and' => '&&',
            'ape' => '~~=',
            'apid' => '~~~',
            'approx' => '~~',
            'backprime' => '`',
            'bcong' => '~=',
            'bdquo' => '"',
            'Because' => '..',
            'between' => ')(',
            'bigtriangleup' => '^',
            'bkarow' => '->',
            'blacktriangle' => '^',
            'blacktriangleleft' => '<',
            'blacktriangleright' => '>',
            'blank' => '_',
            'bnequiv' => '!==',
            'boxH' => '=',
            'boxv' => '|',
            'boxV' => '|',
            'brvbar' => '|',
            'bsemi' => ';',
            'bsim' => '?',
            'bull' => '.',
            'CapitalDifferentialD' => 'DD',
            'ccupssm' => '?',
            'cent' => 'c',
            'CenterDot' => '.',
            'circ' => '^',
            'CircleDot' => '(.)',
            'CirclePlus' => '(+)',
            'CircleTimes' => '(X)',
            'Colon' => '::',
            'compfn' => '.',
            'Congruent' => '===',
            'copy' => '(c)',
            'copysr' => '(p)',
            'cross' => 'X',
            'Cross' => 'x',
            'ctdot' => '...',
            'dbkarow' => '-->',
            'deg' => '\'',
            'dharl' => '<-',
            'DifferentialD' => 'dd',
            'divide' => '/',
            'divonx' => '*',
            'dot' => '.',
            'DotDot' => '..',
            'DoubleDot' => '..',
            'DoubleLeftArrow' => '<=',
            'DoubleLongRightArrow' => '=>',
            'DoubleUpArrow' => '<=',
            'Downarrow' => '=>',
            'DownArrowUpArrow' => '<=>',
            'downdownarrows' => '<=',
            'drbkarow' => '>->',
            'dsol' => '/',
            'dtdot' => '...',
            'dzigrarr' => '~~~>',
            'ell' => 'l',
            'empty' => '[]',
            'emsp' => ' ',
            'emsp13' => ' ',
            'emsp14' => ' ',
            'ensp' => ' ',
            'epar' => '#',
            'Equal' => '==',
            'equest' => '?=',
            'Esim' => '~=',
            'euro' => 'eur.',
            'expectation' => 'E',
            'exponentiale' => '^',
            'ff' => '?',
            'ffi' => '?',
            'ffl' => '?',
            'fi' => '?',
            'fl' => '?',
            'Fouriertrf' => 'F',
            'fpartint' => '|',
            'frac13' => '1/3',
            'frac14' => '1/4',
            'frac15' => '1/5',
            'frac16' => '1/6',
            'frac18' => '1/8',
            'frac23' => '2/3',
            'frac25' => '2/5',
            'frac34' => '3/4',
            'frac35' => '3/5',
            'frac38' => '3/8',
            'frac45' => '4/5',
            'frac56' => '5/6',
            'frac58' => '5/8',
            'frac78' => '7/8',
            'frasl' => '/',
            'frown' => '(',
            'ge' => '>=',
            'geqq' => '>=',
            'gg' => '>>',
            'Gg' => '>>>',
            'gla' => '><',
            'glj' => 'x',
            'gneqq' => '?',
            'GreaterGreater' => '>>',
            'GreaterTilde' => '>~',
            'gtquest' => '`>',
            'gtrdot' => '.>',
            'gvertneqq' => '??',
            'hairsp' => ' ',,
            'half' => '1/2',
            'half' => '1/2',
            'hArr' => '<=>',
            'harr' => '<->',
            'harrw' => '<~~>',
            'hellip' => '...',
            'hellip' => '...',
            'hercon' => '+',
            'HilbertSpace' => 'H',
            'hoarr' => '<->',
            'horbar' => '---',
            'HorizontalLine' => '-',
            'hybull' => '-',
            'ic' => '',
            'iiiint' => '||||',
            'ImaginaryI' => 'i',
            'Implies' => '=>',
            'incare' => 'c.o.',
            'infin' => '8',
            'Int' => '||',
            'Integral' => '|',
            'InvisibleTimes' => '',
            'iprod' => '-',
            'lAarr' => '<=',
            'lagran' => 'L',
            'Lang' => '<<',
            'langle' => '<',
            'laquo' => '<<',
            'larr' => '<-',
            'Larr' => '<<-',
            'larrtl' => '<-<',
            'lat' => '<-',
            'latail' => '-<',
            'lBarr' => '<-',
            'lbbrk' => '(',
            'lbrke' => '[',
            'lbrksld' => '[',
            'lbrkslu' => '[',
            'lceil' => '[',
            'ldquo' => '"',
            'lE' => '<=',
            'LeftArrowBar' => '|<-',
            'LeftDoubleBracket' => '[[',
            'LeftFloor' => '[',
            'leftharpoondown' => '<-',
            'leftharpoonup' => '<-',
            'leftrightharpoons' => '<=>',
            'LeftTeeArrow' => '<-|',
            'leq' => '<=',
            'les' => '<=',
            'lessdot' => '<.',
            'LessLess' => '<<',
            'LessTilde' => '~<',
            'll' => '<<',
            'Ll' => '>>>',
            'llarr' => '<=',
            'lmoust' => '{',
            'lneqq' => '?',
            'loang' => '[[',
            'loarr' => '->',
            'longleftarrow' => '<--',
            'LongLeftRightArrow' => '<-->',
            'LongRightArrow' => '-->',
            'lopar' => '(',
            'lowast' => '*',
            'lozf' => '.',
            'lrarr' => '<=>',
            'lrm' => '',
            'lsaquo' => '<',
            'lsquo' => '\'',
            'ltquest' => '`<',
            'ltri' => '<',
            'lvertneqq' => '??',
            'macr' => '-',
            'maltese' => '+',
            'map' => '|->',
            'mdash' => '--',
            'MediumSpace' => ' ',
            'Mellintrf' => 'M',
            'mid' => '|',
            'minus' => '-',
            'MinusPlus' => '+/-',
            'napid' => '!~~',
            'napprox' => '!~~',
            'nbsp' => ' ',
            'nbsp' => ' ',
            'ndash' => '-',
            'neArr' => '=>',
            'nGg' => '>>>/',
            'nGt' => '>>|',
            'nhArr' => '<=/=>',
            'nhpar' => '#',
            'nldr' => '..',
            'nldr' => '..',
            'nlE' => '<=/',
            'nleftarrow' => '<-/-',
            'nLeftarrow' => '<=/=',
            'nleftrightarrow' => '<-/->',
            'nLl' => '<<</',
            'nLt' => '<<|',
            'nLtv' => '<</',
            'NoBreak' => '',
            'not' => '!',
            'NotCongruent' => '!==',
            'NotEqual' => '!=',
            'NotGreaterFullEqual' => '>=/',
            'NotGreaterGreater' => '>>/',
            'NotNestedGreaterGreater' => '>>/',
            'NotNestedLessLess' => '<</',
            'NotPrecedesEqual' => '<=/',
            'NotSucceedsEqual' => '>=/',
            'NotTilde' => '~',
            'nparsl' => '//\\',
            'nrarr' => '-/->',
            'nrArr' => '=/=>',
            'nshortmid' => '?',
            'numero' => 'No.',
            'numsp' => ' ',
            'nvge' => '>=|',
            'nvle' => '<=|',
            'nvsim' => '~|',
            'nwArr' => '=>',
            'oast' => '(*)',
            'ocir' => '(O)',
            'ominus' => '(-)',
            'OpenCurlyDoubleQuote' => '"',
            'OpenCurlyQuote' => '\'',
            'Or' => ' or ',
            'or' => '||',
            'orderof' => 'oF',
            'ordm' => 'ยบ',
            'oS' => '(s)',
            'osol' => '(/)',
            'OverBrace' => '}',
            'OverParenthesis' => '(',
            'parsim' => '#',
            'parsl' => '//',
            'permil' => '%',
            'planckh' => 'h',
            'plusdo' => '+',
            'pluse' => '+=',
            'plusmn' => '+-',
            'pound' => 'ยฃ',
            'Pr' => '<<',
            'prE' => '<=',
            'prec' => '<',
            'preceq' => '<=',
            'precnapprox' => '<~',
            'Prime' => '"',
            'prime' => '`',
            'puncsp' => ' ',
            'qprime' => '```',
            'rAarr' => '=>',
            'race' => '~',
            'Rang' => '>>',
            'raquo' => 'ยป',
            'rarrtl' => '>->',
            'Rarrtl' => '>->>',
            'ratail' => '>-',
            'ratio' => ':',
            'rbbrk' => ')',
            'rbrke' => ']',
            'rbrksld' => ']',
            'rbrkslu' => ']',
            'rdquo' => '"',
            'realine' => 'R',
            'reg' => '(R)',
            'rhard' => '->',
            'rharu' => '->',
            'RightAngleBracket' => '>',
            'RightArrowBar' => '->|',
            'RightCeiling' => ']',
            'RightDoubleBracket' => ']]',
            'RightDownVector' => '->',
            'RightFloor' => ']',
            'rightleftarrows' => '<=>',
            'rightleftharpoons' => '<=>',
            'RightUpVector' => '->',
            'rlm' => '',
            'rmoust' => '}',
            'roang' => ']]',
            'roarr' => '->',
            'ropar' => ')',
            'rrarr' => '->->',
            'rsaquo' => '>',
            'rsquo' => '\'',
            'rtri' => '>',
            'RuleDelayed' => ':->',
            'rx' => 'Rx',
            'sbquo' => '\'',
            'Sc' => '>>',
            'scE' => '>=',
            'seArr' => '=>',
            'sect' => 'SS',
            'sext' => '*',
            'sharp' => '#',
            'shortparallel' => '||',
            'shy' => '',
            'sim' => '~',
            'smile' => ')',
            'smt' => '->',
            'srarr' => '->',
            'ssetmn' => '/',
            'Star' => '*',
            'succ' => '>',
            'SucceedsEqual' => '>=',
            'succnapprox' => '~>',
            'sum' => '{',
            'sup1' => '^1',
            'sup2' => '^2',
            'sup3' => '^3',
            'swArr' => '<=',
            'target' => '+',
            'there4' => '..',
            'ThickSpace' => ' ',
            'ThinSpace' => ' ',
            'times' => 'x',
            'times' => 'x',
            'tint' => '|',
            'topbot' => 'I',
            'tprime' => '```',
            'trade' => 'tm',
            'triangle' => '^',
            'TripleDot' => '...',
            'trisb' => '^',
            'twoheadrightarrow' => '->>',
            'udarr' => '<=>',
            'uharl' => '->',
            'UnderBrace' => '{',
            'UnderParenthesis' => ')',
            'Updownarrow' => '<=>',
            'upuparrows' => '<=',
            'utdot' => '...',
            'vellip' => '...',
            'Verbar' => '||',
            'VerticalSeparator' => '|',
            'xhArr' => '<=>',
            'xlArr' => '<=',
            'xmap' => '|->',
            'ZeroWidthSpace' => '',
            'zigrarr' => '~~>',
            'zwj' => '',
            'zwnj' => '',
        ]
        as $s => $r
        ) {
            if (isset($chars[$s])) {
                $this->charMapReplace[$chars[$s]] = $r;
            }
        }
        unset($chars);
    }

    /**
     * Attempts to remove accents
     * @param string $input
     * @return string
     */
    public function unaccent(string $input) {
        return str_replace($this->charMapSearch, $this->charMapReplace, $input);
    }

}
